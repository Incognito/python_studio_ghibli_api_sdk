# coding: utf-8

"""
    Studio Ghibli API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Films(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'description': 'str',
        'director': 'str',
        'producer': 'str',
        'release_date': 'str',
        'rt_score': 'str',
        'people': 'str',
        'species': 'str',
        'locations': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'director': 'director',
        'producer': 'producer',
        'release_date': 'release_date',
        'rt_score': 'rt_score',
        'people': 'people',
        'species': 'species',
        'locations': 'locations',
        'url': 'url'
    }

    def __init__(self, id=None, title=None, description=None, director=None, producer=None, release_date=None, rt_score=None, people=None, species=None, locations=None, url=None):  # noqa: E501
        """Films - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._description = None
        self._director = None
        self._producer = None
        self._release_date = None
        self._rt_score = None
        self._people = None
        self._species = None
        self._locations = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if director is not None:
            self.director = director
        if producer is not None:
            self.producer = producer
        if release_date is not None:
            self.release_date = release_date
        if rt_score is not None:
            self.rt_score = rt_score
        if people is not None:
            self.people = people
        if species is not None:
            self.species = species
        if locations is not None:
            self.locations = locations
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this Films.  # noqa: E501

        Unique identifier representing a specific film  # noqa: E501

        :return: The id of this Films.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Films.

        Unique identifier representing a specific film  # noqa: E501

        :param id: The id of this Films.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Films.  # noqa: E501

        Title of the film  # noqa: E501

        :return: The title of this Films.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Films.

        Title of the film  # noqa: E501

        :param title: The title of this Films.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Films.  # noqa: E501

        Description of the film  # noqa: E501

        :return: The description of this Films.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Films.

        Description of the film  # noqa: E501

        :param description: The description of this Films.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def director(self):
        """Gets the director of this Films.  # noqa: E501

        Director of the film  # noqa: E501

        :return: The director of this Films.  # noqa: E501
        :rtype: str
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this Films.

        Director of the film  # noqa: E501

        :param director: The director of this Films.  # noqa: E501
        :type: str
        """

        self._director = director

    @property
    def producer(self):
        """Gets the producer of this Films.  # noqa: E501

        Producer of the film  # noqa: E501

        :return: The producer of this Films.  # noqa: E501
        :rtype: str
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """Sets the producer of this Films.

        Producer of the film  # noqa: E501

        :param producer: The producer of this Films.  # noqa: E501
        :type: str
        """

        self._producer = producer

    @property
    def release_date(self):
        """Gets the release_date of this Films.  # noqa: E501

        Release year of film  # noqa: E501

        :return: The release_date of this Films.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Films.

        Release year of film  # noqa: E501

        :param release_date: The release_date of this Films.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    @property
    def rt_score(self):
        """Gets the rt_score of this Films.  # noqa: E501

        Rotten Tomato score of film  # noqa: E501

        :return: The rt_score of this Films.  # noqa: E501
        :rtype: str
        """
        return self._rt_score

    @rt_score.setter
    def rt_score(self, rt_score):
        """Sets the rt_score of this Films.

        Rotten Tomato score of film  # noqa: E501

        :param rt_score: The rt_score of this Films.  # noqa: E501
        :type: str
        """

        self._rt_score = rt_score

    @property
    def people(self):
        """Gets the people of this Films.  # noqa: E501

        People found in film  # noqa: E501

        :return: The people of this Films.  # noqa: E501
        :rtype: str
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this Films.

        People found in film  # noqa: E501

        :param people: The people of this Films.  # noqa: E501
        :type: str
        """

        self._people = people

    @property
    def species(self):
        """Gets the species of this Films.  # noqa: E501

        Species found in film  # noqa: E501

        :return: The species of this Films.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this Films.

        Species found in film  # noqa: E501

        :param species: The species of this Films.  # noqa: E501
        :type: str
        """

        self._species = species

    @property
    def locations(self):
        """Gets the locations of this Films.  # noqa: E501

        Locations found in film  # noqa: E501

        :return: The locations of this Films.  # noqa: E501
        :rtype: str
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Films.

        Locations found in film  # noqa: E501

        :param locations: The locations of this Films.  # noqa: E501
        :type: str
        """

        self._locations = locations

    @property
    def url(self):
        """Gets the url of this Films.  # noqa: E501

        URL of film  # noqa: E501

        :return: The url of this Films.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Films.

        URL of film  # noqa: E501

        :param url: The url of this Films.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Films):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
