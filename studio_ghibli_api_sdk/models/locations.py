# coding: utf-8

"""
    Studio Ghibli API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Locations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'climate': 'str',
        'terrain': 'int',
        'surface_water': 'str',
        'residents': 'int',
        'films': 'str',
        'url': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'climate': 'climate',
        'terrain': 'terrain',
        'surface_water': 'surface_water',
        'residents': 'residents',
        'films': 'films',
        'url': 'url'
    }

    def __init__(self, id=None, name=None, climate=None, terrain=None, surface_water=None, residents=None, films=None, url=None):  # noqa: E501
        """Locations - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._climate = None
        self._terrain = None
        self._surface_water = None
        self._residents = None
        self._films = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if climate is not None:
            self.climate = climate
        if terrain is not None:
            self.terrain = terrain
        if surface_water is not None:
            self.surface_water = surface_water
        if residents is not None:
            self.residents = residents
        if films is not None:
            self.films = films
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this Locations.  # noqa: E501

        Unique identifier representing a specific location  # noqa: E501

        :return: The id of this Locations.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Locations.

        Unique identifier representing a specific location  # noqa: E501

        :param id: The id of this Locations.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Locations.  # noqa: E501

        Name of location  # noqa: E501

        :return: The name of this Locations.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Locations.

        Name of location  # noqa: E501

        :param name: The name of this Locations.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def climate(self):
        """Gets the climate of this Locations.  # noqa: E501

        Climate of location  # noqa: E501

        :return: The climate of this Locations.  # noqa: E501
        :rtype: str
        """
        return self._climate

    @climate.setter
    def climate(self, climate):
        """Sets the climate of this Locations.

        Climate of location  # noqa: E501

        :param climate: The climate of this Locations.  # noqa: E501
        :type: str
        """

        self._climate = climate

    @property
    def terrain(self):
        """Gets the terrain of this Locations.  # noqa: E501

        Terrain type of location  # noqa: E501

        :return: The terrain of this Locations.  # noqa: E501
        :rtype: int
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain):
        """Sets the terrain of this Locations.

        Terrain type of location  # noqa: E501

        :param terrain: The terrain of this Locations.  # noqa: E501
        :type: int
        """

        self._terrain = terrain

    @property
    def surface_water(self):
        """Gets the surface_water of this Locations.  # noqa: E501

        Percent of location covered in water  # noqa: E501

        :return: The surface_water of this Locations.  # noqa: E501
        :rtype: str
        """
        return self._surface_water

    @surface_water.setter
    def surface_water(self, surface_water):
        """Sets the surface_water of this Locations.

        Percent of location covered in water  # noqa: E501

        :param surface_water: The surface_water of this Locations.  # noqa: E501
        :type: str
        """

        self._surface_water = surface_water

    @property
    def residents(self):
        """Gets the residents of this Locations.  # noqa: E501

        Array of residents in location  # noqa: E501

        :return: The residents of this Locations.  # noqa: E501
        :rtype: int
        """
        return self._residents

    @residents.setter
    def residents(self, residents):
        """Sets the residents of this Locations.

        Array of residents in location  # noqa: E501

        :param residents: The residents of this Locations.  # noqa: E501
        :type: int
        """

        self._residents = residents

    @property
    def films(self):
        """Gets the films of this Locations.  # noqa: E501

        Climate of location  # noqa: E501

        :return: The films of this Locations.  # noqa: E501
        :rtype: str
        """
        return self._films

    @films.setter
    def films(self, films):
        """Sets the films of this Locations.

        Climate of location  # noqa: E501

        :param films: The films of this Locations.  # noqa: E501
        :type: str
        """

        self._films = films

    @property
    def url(self):
        """Gets the url of this Locations.  # noqa: E501

        Individual URL of the location  # noqa: E501

        :return: The url of this Locations.  # noqa: E501
        :rtype: int
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Locations.

        Individual URL of the location  # noqa: E501

        :param url: The url of this Locations.  # noqa: E501
        :type: int
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Locations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
