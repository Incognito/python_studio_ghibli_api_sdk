# coding: utf-8

"""
    Studio Ghibli API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Vehicles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'vehicle_class': 'str',
        'length': 'str',
        'pilot': 'str',
        'films': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'vehicle_class': 'vehicle_class',
        'length': 'length',
        'pilot': 'pilot',
        'films': 'films',
        'url': 'url'
    }

    def __init__(self, id=None, name=None, description=None, vehicle_class=None, length=None, pilot=None, films=None, url=None):  # noqa: E501
        """Vehicles - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._vehicle_class = None
        self._length = None
        self._pilot = None
        self._films = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if vehicle_class is not None:
            self.vehicle_class = vehicle_class
        if length is not None:
            self.length = length
        if pilot is not None:
            self.pilot = pilot
        if films is not None:
            self.films = films
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this Vehicles.  # noqa: E501

        Unique identifier representing a specific vehicle  # noqa: E501

        :return: The id of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vehicles.

        Unique identifier representing a specific vehicle  # noqa: E501

        :param id: The id of this Vehicles.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Vehicles.  # noqa: E501

        Name of the vehicles  # noqa: E501

        :return: The name of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vehicles.

        Name of the vehicles  # noqa: E501

        :param name: The name of this Vehicles.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Vehicles.  # noqa: E501

        Description of the vehicle  # noqa: E501

        :return: The description of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vehicles.

        Description of the vehicle  # noqa: E501

        :param description: The description of this Vehicles.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vehicle_class(self):
        """Gets the vehicle_class of this Vehicles.  # noqa: E501

        Class of the vehicle  # noqa: E501

        :return: The vehicle_class of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_class

    @vehicle_class.setter
    def vehicle_class(self, vehicle_class):
        """Sets the vehicle_class of this Vehicles.

        Class of the vehicle  # noqa: E501

        :param vehicle_class: The vehicle_class of this Vehicles.  # noqa: E501
        :type: str
        """

        self._vehicle_class = vehicle_class

    @property
    def length(self):
        """Gets the length of this Vehicles.  # noqa: E501

        Length of the vehicle in feet  # noqa: E501

        :return: The length of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Vehicles.

        Length of the vehicle in feet  # noqa: E501

        :param length: The length of this Vehicles.  # noqa: E501
        :type: str
        """

        self._length = length

    @property
    def pilot(self):
        """Gets the pilot of this Vehicles.  # noqa: E501

        Pilot of the vehicle  # noqa: E501

        :return: The pilot of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._pilot

    @pilot.setter
    def pilot(self, pilot):
        """Sets the pilot of this Vehicles.

        Pilot of the vehicle  # noqa: E501

        :param pilot: The pilot of this Vehicles.  # noqa: E501
        :type: str
        """

        self._pilot = pilot

    @property
    def films(self):
        """Gets the films of this Vehicles.  # noqa: E501

        Array of films the vehicle appears in  # noqa: E501

        :return: The films of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._films

    @films.setter
    def films(self, films):
        """Sets the films of this Vehicles.

        Array of films the vehicle appears in  # noqa: E501

        :param films: The films of this Vehicles.  # noqa: E501
        :type: str
        """

        self._films = films

    @property
    def url(self):
        """Gets the url of this Vehicles.  # noqa: E501

        Unique URL of the vehicle  # noqa: E501

        :return: The url of this Vehicles.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Vehicles.

        Unique URL of the vehicle  # noqa: E501

        :param url: The url of this Vehicles.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vehicles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
